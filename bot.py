import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from eth_account import Account

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway)
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

user_state = {}

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
            [KeyboardButton("üìú –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")],
            [KeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å seed –≤ –∞–¥—Ä–µ—Å")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = "main"
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    state = user_state.get(user_id, "main")

    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        user_state[user_id] = "awaiting_address_balance"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ Ethereum-–∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x):")
    elif text == "üìú –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
        user_state[user_id] = "awaiting_address_tx"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ Ethereum-–∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x):")
    elif text == "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å seed –≤ –∞–¥—Ä–µ—Å":
        user_state[user_id] = "awaiting_seed"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ seed-—Ñ—Ä–∞–∑—É (12 –∏–ª–∏ 24 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
    else:
        if state == "awaiting_address_balance":
            if text.startswith("0x") and len(text) == 42:
                balance = get_eth_balance(text)
                await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ETH")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 42 —Å–∏–º–≤–æ–ª–∞, –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x.")
            user_state[user_id] = "main"

        elif state == "awaiting_address_tx":
            if text.startswith("0x") and len(text) == 42:
                txs = get_eth_transactions(text)
                if txs:
                    msg = "üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n" + "\n\n".join(txs[:3])
                else:
                    msg = "üì≠ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞."
                await update.message.reply_text(msg)
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 42 —Å–∏–º–≤–æ–ª–∞, –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x.")
            user_state[user_id] = "main"

        elif state == "awaiting_seed":
            try:
                account = Account.from_mnemonic(text)
                address = account.address
                private_key = account.key.hex()
                await update.message.reply_text(
                    f"‚úÖ –ê–¥—Ä–µ—Å: `{address}`\n"
                    f"üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: `{private_key}`\n\n"
                    f"‚ö†Ô∏è –ù–ò–ö–û–ú–£ –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ô–¢–ï –ü–†–ò–í–ê–¢–ù–´–ô –ö–õ–Æ–ß!",
                    parse_mode="Markdown"
                )
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å seed-—Ñ—Ä–∞–∑—ã.")
            user_state[user_id] = "main"
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=get_main_keyboard())

def get_eth_balance(address: str) -> str:
    url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest"
    try:
        res = requests.get(url, timeout=10)
        data = res.json()
        if data.get("status") == "1":
            return f"{int(data['result']) / 1e18:.6f}"
        else:
            return "0.0"
    except Exception as e:
        return f"–æ—à–∏–±–∫–∞: {str(e)[:50]}"

def get_eth_transactions(address: str) -> list:
    url = f"https://api.etherscan.io/api?module=account&action=txlist&address={address}&page=1&offset=5&sort=desc"
    try:
        res = requests.get(url, timeout=10)
        data = res.json()
        if data.get("status") == "1" and data.get("result"):
            txs = []
            for tx in data["result"][:3]:
                value_eth = int(tx['value']) / 1e18
                txs.append(
                    f"Hash: `{tx['hash'][:12]}...`\n"
                    f"From: `{tx['from'][:10]}...`\n"
                    f"To: `{tx['to'][:10]}...`\n"
                    f"Value: {value_eth:.6f} ETH"
                )
            return txs
        else:
            return []
    except:
        return []

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Railway...")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
